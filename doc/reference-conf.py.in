########################################################################
# Reference settings.

# The full version, including alpha/beta/rc tags
release = '@PROJ_RELEASE@'

# Major.minor
version = '@PROJ_VERSION@'

# Current CMake version.
cmake_version = '@CMAKE_MAJOR_VERSION@.@CMAKE_MINOR_VERSION@'

# HTML tweaks.
html_title = '{0} {1} Reference'.format(project, release)
html_short_title = '{0} Reference'.format(release)

# References-specific extensions.
if @WANT_VERSION_SWITCH@:
    extensions.append('sphinxcontrib.jquery')

# External cross-references.
intersphinx_mapping \
    = { 'cmake-ref-current':
        ('https://cmake.org/cmake/help/v{0}/'.format(cmake_version), None),
        'cmake-ref-latest': ('https://cmake.org/cmake/help/latest/', None)
    }

# Shortcut to CMake domain-specific directives and roles.
primary_domain = 'cmake'

manpages_url = 'https://man7.org/linux/man-pages/man{section}/{page}.{section}.html'
want_man = @WANT_UNIX_MAN_PAGES@
man_pages = [] # Populated below.

if want_man:
    # -- U**X man-page output ----------------------------------------------------
    cmake_manuals = sorted(glob.glob(r'@CMAKE_CURRENT_SOURCE_DIR@/reference/manual/*.rst'))
    cmake_manual_description = re.compile('^\.\. cmake-manual-description:(.*)$')
    man_make_section_directory = True
    man_show_urls = False
    for fpath in cmake_manuals:
        try:
            name, sec, rst = os.path.basename(fpath).rsplit('.', 2)
            desc = None
            f = open(fpath, 'r')
            for l in f:
                m = cmake_manual_description.match(l)
                if m:
                    desc = m.group(1).strip()
                    break
                f.close()
            if desc:
                man_pages.append(('manual/%s.%s' % (name, sec),
                                  name, desc, [], int(sec)))
            else:
                sys.stderr.write("ERROR: No cmake-manual-description in '%s'\n" % fpath)
        except Exception as e:
            raise
else:
    extensions.append('sphinx_design') # Breaks man page generation.
    sd_add_bootstrap_css = False

# Add any paths that contain templates here, relative to this directory.
templates_path = ['@CMAKE_CURRENT_SOURCE_DIR@/reference-templates']

# Setup function.
def setup(app):
    app.add_config_value('versionswitch', @WANT_VERSION_SWITCH@, 'env')
    app.add_js_file('bootstrap.bundle.min.js')
