#[================================================================[.rst:
CetMakeCompletions
------------------

Define the function :command:`cet_make_completions` to generate BASH
completion shell code.

#]================================================================]

# Avoid unnecessary repeat inclusion.
include_guard()

cmake_minimum_required(VERSION 3.18.2...3.27 FATAL_ERROR)

include(CetCMakeUtils)

#[================================================================[.rst:
.. command:: cet_make_completions

   Generate BASH command-completion shell code for an exec with `-h` help text
   generated by `Boost Program Options
   <https://www.boost.org/doc/libs/release/doc/html/program_options.html>`_.

   .. seealso:: :manpage:`bash(1)`, `bash-completion <https://github.com/scop/bash-completion>`_.

   .. code-block:: cmake

      cet_make_completions(<exec-target> [<user-completions-file>])

   Non-option arguments
   ^^^^^^^^^^^^^^^^^^^^

   ``<exec-target>``
     The executable target for which to generate BASH command-completion code.

   ``<user-completions-file>`` ...
     One or more files containing completions in addition to those to be
     generated.

   Details
   ^^^^^^^

   .. rst-class:: text-start

   Completions will be written to :variable:`CMAKE_CURRENT_BINARY_DIR
   <cmake-ref-current:variable:CMAKE_CURRENT_BINARY_DIR>` and installed
   in :variable:`<PROJECT-NAME>_BIN_DIR`.

   The automatically generated bash completions simply allow completions
   for any program options, irrespective of any other program options
   that have been provided on the command line. For more specialized
   behavior, one or more supplementary ``<user-completion-file>``\ s can
   be provided as non-option argmuents following ``<exec-target>``.

   In this customizations file, the following dereferences are allowed:

   ``${cur}``
     The command-line word currently being parsed

   ``${prev}``
     The previous word that was parsed

   as well as any of the Bash variables (e.g. ``COMP_WORDS``,
   ``COMPREPLY``, etc.).

   If a customizations file is provided, all automatically generated
   completions are still availableâ€”it is thus not necessary to define
   a customization for each program option.

#]================================================================]

function(cet_make_completions exec)
  cet_localize_pv(cetmodules BIN_DIR)
  if (NOT TARGET "${exec}")
    message(ERROR "cet_make_completions(): \"${exec}\" is not a target")
  endif()
  set(completion_comment "Generating bash completions for ${exec}")
  string(REGEX REPLACE "^.*::" "" output_file "${exec}")
  set(output_file "${CMAKE_CURRENT_BINARY_DIR}/${output_file}_completions")
  if(ARGV1)
    set(user_provided_completions ${ARGN})
    set(completion_comment "${completion_comment} with customizations in ${user_provided_completions}")
  endif()
  add_custom_command(
    OUTPUT "${output_file}"
    COMMAND "${cetmodules_BIN_DIR}/make_bash_completions"
    "${output_file}" "${exec}" ${user_provided_completions}
    VERBATIM
    COMMAND_EXPAND_LISTS
    COMMENT "${completion_comment}"
    DEPENDS "${cetmodules_BIN_DIR}/make_bash_completions"
  )
  add_custom_target(MakeCompletions_${exec} ALL
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${exec}_completions)
  add_dependencies(MakeCompletions_${exec} ${exec})

  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${exec}_completions DESTINATION ${${CETMODULES_CURRENT_PROJECT_NAME}_BIN_DIR})
endfunction(cet_make_completions)
