#!/usr/bin/env perl
# -*- cperl -*-
## no critic qw(Bangs::ProhibitFlagComments)
# FIXME: Restore function!
# FIXME: Documentation!
##################
# Preamble.

use 5.016;
use strict;
use warnings FATAL => qw(io regexp severe syntax uninitialized void);

##
use Cwd qw(abs_path chdir getcwd);
use File::Spec qw();
use FindBin qw();

my $_cetmodules_top;


BEGIN {
  $_cetmodules_top = abs_path(File::Spec->catfile($FindBin::RealBin, q(..)));
}

use lib File::Spec->catfile($_cetmodules_top, "libexec");

##
use Cetmodules qw(:DIAG_VARS);
use Cetmodules::CMake qw();
use Cetmodules::CMake::Util qw(is_comment);
use Cetmodules::Migrate::CMake qw(:CMAKE_FILE_TOOLS);
use Cetmodules::Migrate::CMake::Tagging qw(untag_informational);
use Cetmodules::Migrate::ProductDeps
  qw(write_product_deps $CETMODULES_VERSION);
use Cetmodules::Migrate::Util qw(gentime);
use Cetmodules::UPS::ProductDeps
  qw(get_parent_info get_pathspec get_product_list get_qualifier_matrix $PATHSPEC_INFO);
use Cetmodules::Util
  qw(error_exit info notify to_string verbose warning $KEYWORD_NOT_PRESENT);
use File::Copy qw(copy);
use File::Find qw();
use File::Path qw(make_path);
use Getopt::Long qw(:config no_ignore_case bundling require_order);
use IO qw(File Handle);
use POSIX qw(strftime);
use Pod::Usage qw(pod2usage);

##
use warnings FATAL => qw(Cetmodules);

our ($PATHSPEC_INFO);

my $options = {};
GetOptions(
  $options, "help|h|?", "clean-info",
  "debug" => \$Cetmodules::DEBUG,
  "dry-run|n",
  "flags-only" => \$Cetmodules::Migrate::CMake::Tagging::FLAGS_ONLY,
  "quiet|q"    => \$Cetmodules::QUIET,
  "verbose|v"  => \$Cetmodules::VERBOSE)
  or pod2usage(-exitval => 2);
$options->{help}      and pod2usage(qq(-exitval) => 1, qq(-verbose) => 3);
$options->{"dry-run"} and info("[DRY_RUN] no files replaced or removed");
my $owd     = getcwd();
my @pkgdirs = _verified_package_selection(@ARGV);
my @extra_args =
  $options->{'clean-info'} ? (comment_handler => \&_clean_info) : ();

for my $pkgtop (@pkgdirs) {
  chdir($pkgtop);
  my $sfd    = "ups/setup_for_development";
  my $pdinfo = { filename => "ups/product_deps" };
  -d "ups" or error_exit("no ups dir: nothing to do");
  -w "ups" or error_exit("ups dir not writable: nothing we can do");
  -r $sfd  or warning("$sfd missing or not readable: will refresh");
  -r $pdinfo->{filename} or error_exit("no $pdinfo->{filename} to migrate");
  $pdinfo->{parent_info} =
    get_parent_info($pdinfo->{filename}, (quiet_warnings => 1));
  my $pkg_path_label = _pkg_path_label($pkgtop, $pdinfo->{parent_info});
  get_pathspec($pdinfo->{parent_info}, keys %{$PATHSPEC_INFO});
  $pdinfo->{pathspecs} = {
      map {
        (
          ( $pdinfo->{parent_info}->{pathspec_cache}->{$_}->{seen_at}
            // $KEYWORD_NOT_PRESENT
          ) > 0
        ) ? ($_ => $pdinfo->{parent_info}->{pathspec_cache}->{$_}) : ();
      } keys %{ $pdinfo->{parent_info}->{pathspec_cache} } };
  $pdinfo->{products} = get_product_list($pdinfo->{filename});
  @{$pdinfo}{qw(ndeps qualifier_columns qualifier_rows notes headers)} =
    get_qualifier_matrix($pdinfo->{filename}, *STDERR);
  info("attempting to read $pkg_path_label/$pdinfo->{filename}... DONE");
  my $from = {
      map {
        (m&\A(cet(?:buildtools|modules))\z&msx)
        ? (name    => $_,
           version => $pdinfo->{products}->{$1}->{q(-)}->{version})
        : ();
      } keys %{ $pdinfo->{products} } };
  if ($from and ($from->{name} // q()) eq "cetmodules") {
    info(<<'EOF');
attempting to complete, update or verify a manual, partial or previous migration
EOF
  } ## end if ($from and ($from->...))
  $options->{"dry-run"} or _backup_files();

  if ($pdinfo->{parent_info}->{name} eq "cetmodules") {
    warning("refusing to touch our own ups/ or CMake files!");
  } else {
    if (not $options->{'clean-info'}) {
      write_product_deps($pkg_path_label, $pdinfo, $options);
      _upgrade_ups_dir("ups");
    }
    write_top_CMakeLists($pdinfo->{parent_info}, $options, @extra_args);
    fix_cmake($pdinfo->{parent_info}, $options, @extra_args);
  } ## end else [ if ($pdinfo->{parent_info...})]
} ## end for my $pkgtop (@pkgdirs)
1;


sub _backup_files {
  my @lt        = localtime;
  my $date      = strftime("%Y%m%d-%H%M%S%z", @lt);
  my $backupdir = abs_path("migrate-backup-$date");
  verbose("backing up files to $backupdir");
  make_path("$backupdir");
  system(qq(cp -pR ups $backupdir/ups)) == 0
    or error_exit("unable to back up UPS directory ups to $backupdir");
  File::Find::find(
    {   preprocess => \&find_cmake,
        wanted     => sub {
          -f or return;
          my ($path, $filepath, $filename) =
          ($File::Find::dir, $File::Find::name, $_);
          my $destdir = File::Spec->catfile($backupdir, $path);
          make_path($destdir);
          copy($_, "$destdir/")
          or error_exit("unable to back up $filepath to $destdir");
        }
    },
    q(.));
  return;
} ## end sub _backup_files


sub _clean_info {
  my ($comments_ish, $cmake_file) = @_;

  foreach my $comment_ref (
    ( map {
        is_comment($comments_ish->{chunks}->[$_])
          ? \$comments_ish->{chunks}->[$_]
          : ();
      } @{ $comments_ish->{arg_indexes} }
    ),
    (exists $comments_ish->{post}) ? $comments_ish : ()
    ) {
    untag_informational($comment_ref);
  } ## end foreach my $comment_ref ((map...))
  return;
} ## end sub _clean_info


sub _pkg_path_label {
  my ($pkgtop, $pi) = @_;
  return (exists $pi->{name}) ? "<$pi->{name}>" : ".../$pkgtop";
}


sub _upgrade_ups_dir {
  my ($upsdir) = @_;
  my @to_remove = map { -f "$upsdir/$_" ? "$upsdir/$_" : (); } (
    qw(product-config.cmake.in README setup_deps
      setup_for_development CMakeLists.txt));
  if ($options->{"dry-run"}) {
    notify(
      "[DRY_RUN] would remove obsolete files from $upsdir:",
      to_string(\@to_remove, { full_indent => 2 }));
  } else {
    info("removing obsolete files from $upsdir...");
    system(qw(rm -fv --), @to_remove) == 0
      or error_exit("failure removing obsolete files from $upsdir");
  } ## end else [ if ($options->{"dry-run"...})]
  my @src_files = (qw(setup_for_development));
  my $gentime   = gentime();

  foreach my $file (@src_files) {
    my $nobuild     = ($file eq "setup_deps") ? 'nobuild' : q();
    my $pkgtop_file = "$_cetmodules_top/ups-templates/$file";
    -r "$pkgtop_file"
      or -r ($pkgtop_file = "$_cetmodules_top/ups-templates/setup.in")
      or error_exit(
        "unable to generate $file from unreadable template $pkgtop_file");

    if ($options->{"dry-run"}) {
      notify("[DRY_RUN] would generate $file from $pkgtop_file");
    } else {
      info("generating $file from template $pkgtop_file");
      my $in = IO::File->new("$pkgtop_file", "<")
        or error_exit("unable to open $pkgtop_file for read");
      my $out = IO::File->new(File::Spec->catfile("$upsdir", "$file"), ">")
        or error_exit("unable to open $upsdir/$file for write");

      while (my $line = <$in>) {
        $line =~
s&\A(\#\s+Generated by\s+).*$&${1}cetmodules $CETMODULES_VERSION at $gentime&msx;
        $line =~ s&\@nobuild\@&$nobuild&gmsx;
        $out->print($line);
      } ## end while (my $line = <$in>)
      $out->close();
      $in->close();
    } ## end else [ if ($options->{"dry-run"...})]
  } ## end foreach my $file (@src_files)
  return;
} ## end sub _upgrade_ups_dir


sub _verified_package_selection {
  my @pkg_list = @_;

  if (not scalar @pkg_list) {
    if (defined $ENV{CETPKG_SOURCE} and $ENV{CETPKG_SOURCE} ne q()) {
      if (  defined $ENV{CETPKG_SOURCE}
        and defined $ENV{MRB_SOURCE}
        and abs_path($ENV{CETPKG_SOURCE}) eq abs_path($ENV{MRB_SOURCE})) {
        opendir my $dh, $ENV{CETPKG_SOURCE} or error_exit(<<"EOF");
unable to get current directory listing for \$CETPKG_SOURCE ($ENV{CETPKG_SOURCE})
EOF
        info("vacuous source dir: defaulting to packages in \$MRB_SOURCE");

        while (my $dir_item = readdir $dh) {
          $dir_item !~ m&\A\.&msx
            and -d $dir_item
            and push @pkg_list,
            File::Spec->catfile($ENV{CETPKG_SOURCE}, $dir_item);
        } ## end while (my $dir_item = readdir...)
        closedir $dh;
      } else {
        info("vacuous source dir: defaulting to \$CETPKG_SOURCE");
        @pkg_list = ($ENV{CETPKG_SOURCE});
      }
    } else {
      info("vacuous source dir: defaulting to current working directory");
      @pkg_list = (getcwd());
    }
  } ## end if (not scalar @pkg_list)
  @pkg_list = grep {
          -d and -r and -w and -f File::Spec->catfile($_, 'CMakeLists.txt')
      and -r File::Spec->catfile($_, 'CMakeLists.txt')
      and -f File::Spec->catfile($_, qw(ups product_deps))
      and -r File::Spec->catfile($_, qw(ups product_deps))
      or warning(<<"EOF");
$_ is not a valid package, or is not readable/writable
EOF
  } @pkg_list;
  return @pkg_list;
} ## end sub _verified_package_selection
1;
__END__

=pod

=head1 NAME

I<migrate>: convert a cetbuildtools package to use cetmodules 2.X, or
         refresh and annotate an existing cetmodules 2.X package.

=head1 USAGE

B<migrate> [B<--flags-only>] [I<options>] [--] [ B<[I<pkg-top>+]

B<migrate> B<--clean-info> [I<options>] [--] [I<pkg-top>+]

B<migrate> B<--help> | B<-h> | B<-?>

I<options>: [ B<--dry-run> | B<-n> ] [ B<--quiet> | B<-q> ]
 [ B<--verbose> | B<-v> ]

Options or arguments marked with B<+> are repeatable and cumulative.

=head1 DESCRIPTION

I<migrate> will make necessary and automated changes to various
configuration files of each specified I<pkg-top> to utilize cetmodules
2.X. Other necessary or recommended changes will be flagged by means of
an inline comment "### MIGRATE-ACTION..."

=head1 ARGUMENTS

=over

=item I<pkg-top>+

Specify one or more package directories (in which a top level
CMakeLists.txt resides) to migrate.

=back

=head2 OPTIONS

=over

=item B<--clean-info>

If this option is specified, a migration will B<not> be
performed. Instead, CMake files will be cleaned of any existing
non-"ACTION" tags.


=item B<--dry-run>

=item B<-n>

Do not change, replace or remove files under I<pkg-top>. Any proposed
changes or annotations to a file will be written to a new file with
".new" appended to the name of the original.


=item B<--help>

=item B<-h>

=item B<-?>

This help.


=item B<--flags-only>

During a migration, only "ACTION" tags will be added to CMake files
(I<cf> B<--clean-info>).


=item B<--quiet>

=item B<-q>

Show fewer messages of type INFO.


=item B<--verbose>

=item B<-v>

Show messages of type VERBOSE.

=back

=head1 NOTES

* Any files to be removed or altered will be backed-up to
  I<pkgtop>/migrate-backup-I<timestamp>. New files will be created with
  a ".new" extension before being moved to replace their original unless
  B<-n> has been specified.

* Any line which has been flagged for action ("### MIGRATE-ACTION-...")
  may be ignored on future invocations of the I<migrate> script by
  replacing the annotation with, "### MIGRATE-NO-ACTION."

* In spite of the backup, it is recommended that the current state of
  the package be checked in to a repository or otherwise saved prior to
  invoking I<migrate> for easy restoration in case of suboptimal
  results.

=cut
