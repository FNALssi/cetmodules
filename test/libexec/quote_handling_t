#!/usr/bin/env perl
# -*- cperl -*-
## no critic qw(Subroutines::ProtectPrivateSubs RegularExpressions::ProhibitComplexRegexes ValuesAndExpressions::ProhibitMagicNumbers)

use 5.016;
use strict;
use warnings FATAL => qw(io regexp severe syntax uninitialized void);

##
use Cwd qw(abs_path);
use FindBin qw();

my $_libexec;


BEGIN {
  $_libexec = File::Spec->catfile($FindBin::Bin, q(..), q(..), 'libexec');
}

use lib $_libexec;

##
use Cetmodules::CMake qw(process_cmake_file reconstitute_code);
use Cetmodules::CMake::Util qw(separate_quotes);
use English qw(-no_match_vars);
use File::Spec qw();
use IO::File qw();
use Test::More;

##
use warnings FATAL => qw(Cetmodules);


sub compare_or_show {
  my ($test, $expected, @args) = @_;
  my $result = is_deeply($test, $expected, @args)
    or diag(explain($test), " != ", explain($expected));
  return $result;
} ## end sub compare_or_show
my $ntests = 0;


sub more_tests {
  my ($more) = @_;
  $ntests += $more // 1;
  return $ntests;
} ## end sub more_tests
my $count = 0;


sub string_tester {
  my ($test_string, $open_hash_refs, $close_hash_refs, @separated_refs) = @_;
  return sub {
    my ($dummy, $cmd_info) = @_;
    my $result = {};
    note("Tests for: ", reconstitute_code($cmd_info));
    my $expected_substrings = scalar @separated_refs;
    ++$count;
    cmp_ok(
      scalar @{ $cmd_info->{arg_indexes} },
      q(==),
      $expected_substrings,
      sprintf(
        "expect %s substring%s\n",
        $expected_substrings, ($expected_substrings == 1) ? q() : q(s)
      ));
    my $subtest_count = 0;

    foreach my $idx_idx (0 .. -1) {
      my $open_ref      = $open_hash_refs->[$subtest_count];
      my $close_ref     = $close_hash_refs->[$subtest_count];
      my $separated_ref = $separated_refs[$subtest_count];
      ++$subtest_count;
      more_tests();
      ++$count;
      subtest "Test $count using '$test_string'" => sub {
        note(
"Test $count: (subtest $subtest_count (\$idx_idx=$idx_idx) for '$test_string')"
        );
        plan tests => 3;
        my $open_test  = $cmd_info->_has_open_quote($idx_idx);
        my $close_test = $cmd_info->_has_close_quote($idx_idx);
        my $index      = $cmd_info->_index_for_arg_at($idx_idx);
        my $joined     = join(q(),
            (defined $open_test)
          ? (@{ $cmd_info->{chunks} }[$index - 1 .. $index + 1])
          : ($cmd_info->{chunks}->[$index]));
        $result->{$subtest_count} =
          { open      => compare_or_show($open_test,  $open_ref,  'open'),
            close     => compare_or_show($close_test, $close_ref, 'close'),
            separated =>
            compare_or_show(
              [separate_quotes($joined)],
              $separated_ref, 'separate'
            ) };
      };
    } ## end foreach my $idx_idx (0 .. -1)
    return $result;
  };
} ## end sub string_tester


sub test_string {
  my ($test_string, @args) = @_;
  chomp $test_string;

  if ((substr($test_string, 0, 1) // q()) ne q&(&) {
    $test_string = "($test_string)";
  }
  more_tests();
  $test_string = "test_string$test_string";
  open(my $fh_in, "<", \$test_string)
    or die "unable to open input stream for string $test_string";
  my $cmake_file = [$fh_in, 'TEST_STRING'];
  process_cmake_file($cmake_file,
    { test_string_cmd => string_tester($test_string, @args) });
  $fh_in->close();
  return;
} ## end sub test_string


sub test_bad_string {
  my ($test_string, $fail_regex, @args) = @_;
  eval { test_string($test_string, @args); } or 1;
  like($EVAL_ERROR, $fail_regex, "bad string '$test_string'")
    or diag(<<"EOF");
bad string '$test_string' should have caused a parse failure matching qr&$fail_regex&
EOF
  return;
} ## end sub test_bad_string

# Open, close reference hashes for bracket-quoted string.
sub bqbit {
  my ($q, $neq) = @_; my $qmarker = q(=) x $neq;
  return { q => "$q${qmarker}$q", qs => $q, qmarker => $qmarker };
}

# Open, close reference hashes for double-quoted string.
my $dqbit = { q => q("), qs => q("), qmarker => q() };

####################################
# Tests.
test_string(<<'EOF', ([undef]) x 2, ['ethel']); # 1
ethel
EOF
test_string(<<'EOF', ([$dqbit]) x 2, [qw(" ethel ")]); # 2
"ethel"
EOF
test_string(
  <<'EOF', [bqbit(q([), 2)], [bqbit(q(]), 2)], [q([==[), 'hibble', q(]==])]); # 3
[==[hibble]==]
EOF
test_string(
  <<'EOF', [bqbit(q([), 0)], [bqbit(q(]), 0)], [q([[), "ask me\n an[other]\n question\n", q(]])]); # 4

[[ask me
 an[other]
 question
]] # daft example

EOF
test_string(<<'EOF', ([undef]) x 2, ['aax"asxy"']); # 5
aax"asxy"
EOF
test_string(<<'EOF', ([undef]) x 2, ['aax"asxy"x']); # 6
aax"asxy"x
EOF
test_string(
  <<'EOF', ([undef, $dqbit, undef]) x 2, ['aax'], [q("), "as\n", q(")], ['xy']); # 7
aax"as
"xy
EOF
test_string(
  <<'EOF', ([undef, $dqbit, undef]) x 2, ['aax'], [q("), "as\\\n", q(")], ['xy']); # 8
aax"as\
"xy
EOF
test_string(<<'EOF', ([(undef) x 2]) x 2, ['aax\"as'], ['\"xy']); # 9
aax\"as
\"xy
EOF
test_string(<<'EOF', undef, undef, ['ethel"Charlie"Bill']);       # 10
ethel"Charlie"Bill
EOF
test_string(
  <<'EOF', ([undef, $dqbit, undef]) x 2, ['ethel'], [qw(" Charlie() ")], ['Bill']); # 11
ethel"Charlie()"Bill
EOF
test_string(
  <<'EOF', ([(undef) x 4]) x 2, ['ethel"Charlie"'], [q{(}], [q{)}], ['Bill']); # 12
ethel"Charlie"()Bill
EOF
test_string(
  <<'EOF', ([(undef) x 3]) x 2, [q{(}], ['ethel"Charlie"Bill'], [q{)}]); # 13
((ethel"Charlie"Bill))
EOF
test_string(<<'EOF', undef, undef, [q{\(ethel"Charlie"Bill}]);           # 14
\(ethel"Charlie"Bill
EOF
test_string(
  <<'EOF', ([(undef) x 4]) x 2, [q(e)], [q{(}], ['thel"Charlie"Bill'], [q{)}]); # 15
e(thel"Charlie"Bill)
EOF
test_string( <<'EOF', ([$dqbit, undef]) x 2, [qw(" aax ")], ['ethel']); # 16
"aax"ethel
EOF
test_string(
  "a((a)x\"a)s\n\"x)y", ([(undef) x 6, $dqbit, (undef) x 3]) x 2,
  ['a'], ([q{(}]) x 2,
  ['a'], [q{)}],
  ['x'], [q("), "a)s\n", q(")],
  ['x'], [q{)}],
  ['y']); # 17
test_string(
  "a ( ( a)x \"a)s\n\"x)y", ([(undef) x 6, $dqbit, (undef) x 3]) x 2,
  ['a'], ([q{(}]) x 2,
  ['a'], [q{)}],
  ['x'], [q("), "a)s\n", q(")],
  ['x'], [q{)}],
  ['y']); # 18
test_bad_string(<<'EOF', qr&^\QFATAL_ERROR: unclosed quote '"'\E&msx); # 19
"missing_close_quote
EOF
test_bad_string(
  <<'EOF', qr&^\QFATAL_ERROR: illegal escaped vertical whitespace as part of unquoted string starting at TEST_STRING:1:12:\E\n&msx); # 20
martin\
Hinckley-Eckley-"Flugelstucker
EOF
test_bad_string("(martin\\",
qr&^\QFATAL_ERROR: incomplete command test_string() at TEST_STRING:1:0 runs into EOF at 1:12\E&msx
); # 21
test_bad_string(
  '(codswallop ',
qr&^\QFATAL_ERROR: incomplete command test_string() at TEST_STRING:1:0 runs into EOF at 1:22\E&msx
); # 22
test_bad_string(
  "(codswallop\nbalderdash\n       crikey ",
qr&^\QFATAL_ERROR: incomplete command test_string() at TEST_STRING:1:0 runs into EOF at 3:13\E&msx
); # 23
test_bad_string("(codswallop\nbalderdash\ncrikey\n",
qr&^\QFATAL_ERROR: incomplete command test_string() at TEST_STRING:1:0 runs into EOF at 3:6\E&msx
); # 24
test_string(
  ' CM "EXCLUDE;DEPENDS" "" ${ARGN}',
  ([(undef, $dqbit, $dqbit, undef)]) x 2,
  ['CM'], [qw(" EXCLUDE;DEPENDS ")], [qw(" ")], ['${ARGN}']); # 25
done_testing($ntests);
