#!/usr/bin/env perl
# -*- cperl -*-
## no critic qw(ValuesAndExpressions::ProhibitMagicNumbers TestingAndDebugging::RequireTestLabels)

use 5.016;
use strict;
use warnings FATAL => qw(io regexp severe syntax uninitialized void);

##
use Cwd qw(abs_path);
use FindBin qw();

##
use lib File::Spec->catfile($FindBin::Bin, q(..), q(..), 'libexec');

##
use Cetmodules::Util
  qw(parse_version_string to_cmake_version to_dot_version to_ups_version to_version_string version_cmp);
use File::Spec qw();
use List::Util qw(shuffle);
use Test::More;

##
use warnings FATAL => qw(Cetmodules);


sub compare_or_show {
  my ($test, $expected, @args) = @_;
  my $result = is_deeply($test, $expected, @args)
    or diag(explain($test), " != ", explain($expected));
  return $result;
} ## end sub compare_or_show
my $ntests = 0;


sub more_tests {
  my ($more) = @_;
  $ntests += $more // 1;
  return;
} ## end sub more_tests
my $develop_ref = {qw(extra develop extra_text develop extra_type 101)};
note('develop');
more_tests(5);
compare_or_show(parse_version_string('develop'), $develop_ref);
is(to_ups_version('develop'),    'vdevelop');
is(to_dot_version('develop'),    'develop');
is(to_cmake_version('develop'),  q());
is(to_version_string('develop'), 'develop');
note('vdevelop');
more_tests();
compare_or_show(parse_version_string('vdevelop'), $develop_ref);
note('.develop');
more_tests();
compare_or_show(parse_version_string('.develop'), $develop_ref);
note('.versatility');
more_tests(5);
compare_or_show(parse_version_string('.versatility'),
  {qw(extra versatility extra_text versatility extra_type 101)});
is(to_ups_version('.versatility'),    'vversatility');
is(to_dot_version('.versatility'),    'versatility');
is(to_cmake_version('.versatility'),  q());
is(to_version_string('.versatility'), 'versatility');
note('1.5.rc7');
more_tests();
compare_or_show(
  parse_version_string('1.5.rc7'),
  {   qw(major 1 minor 5 extra_type -1 extra rc7 extra_text rc extra_num 7),
      bits => [1, 5] });
note('v1_5_rc7');
more_tests(4);
is(to_ups_version('v1_5_rc7'),    'v1_5rc7');
is(to_dot_version('v1_5_rc7'),    '1.5rc7');
is(to_cmake_version('v1_5_rc7'),  '1.5');
is(to_version_string('v1_5_rc7'), '1.5-rc7');
note('1..5.');
more_tests(5);
compare_or_show(parse_version_string('1..5.'),
  { qw(major 1 minor 0 patch 5), bits => [1, 0, 5] });
is(to_ups_version('1..5.'),    'v1_0_5');
is(to_dot_version('1..5.'),    '1.0.5');
is(to_cmake_version('1..5.'),  '1.0.5');
is(to_version_string('1..5.'), '1.0.5');
my $rc_ref = {qw(major 1 extra_type -1 extra pre7 extra_text pre extra_num 7),
              bits => [1] };
note('1pre7');
more_tests();
compare_or_show(parse_version_string('1pre7'), $rc_ref);
note('1.pre7');
more_tests();
compare_or_show(parse_version_string('1.pre7'), $rc_ref);
note('1..pre7');
more_tests();
compare_or_show(parse_version_string('1..pre7'), $rc_ref);
note('1..-pre7');
more_tests();
compare_or_show(parse_version_string('1..-pre7'), $rc_ref);
note('1pre7');
more_tests(4);
is(to_ups_version('1pre7'),    'v1pre7');
is(to_dot_version('1pre7'),    '1pre7');
is(to_cmake_version('1pre7'),  '1');
is(to_version_string('1pre7'), '1-pre7');
note('1.-pre7');
more_tests(4);
is(to_ups_version('1.-pre7'),    'v1pre7');
is(to_dot_version('1.-pre7'),    '1pre7');
is(to_cmake_version('1.-pre7'),  '1');
is(to_version_string('1.-pre7'), '1-pre7');
note('02.04.03');
more_tests(5);
compare_or_show(parse_version_string('02.04.03'),
  { qw(major 02 minor 04 patch 03), bits => [qw( 02 04 03 )] });
is(to_ups_version('02.04.03'),    'v02_04_03');
is(to_dot_version('02.04.03'),    '02.04.03');
is(to_cmake_version('02.04.03'),  '02.04.03');
is(to_version_string('02.04.03'), '02.04.03');
$rc_ref = {
  qw(major 02 minor 04 patch 03
    extra rc07 extra_type -1 extra_num 07 extra_text rc),
  bits => [qw( 02 04 03 )] };
note('02.04.03.rc07');
more_tests(5);
compare_or_show(parse_version_string('02.04.03.rc07'), $rc_ref);
is(to_ups_version('02.04.03.rc07'),    'v02_04_03rc07');
is(to_dot_version('02.04.03.rc07'),    '02.04.03rc07');
is(to_cmake_version('02.04.03.rc07'),  '02.04.03');
is(to_version_string('02.04.03.rc07'), '02.04.03-rc07');
note('02.04.03rc07');
more_tests(5);
compare_or_show(parse_version_string('02.04.03rc07'), $rc_ref);
is(to_ups_version('02.04.03rc07'),    'v02_04_03rc07');
is(to_dot_version('02.04.03rc07'),    '02.04.03rc07');
is(to_cmake_version('02.04.03rc07'),  '02.04.03');
is(to_version_string('02.04.03rc07'), '02.04.03-rc07');
note('02.04.03-rc07');
more_tests(5);
compare_or_show(parse_version_string('02.04.03-rc07'), $rc_ref);
is(to_ups_version('02.04.03-rc07'),    'v02_04_03rc07');
is(to_dot_version('02.04.03-rc07'),    '02.04.03rc07');
is(to_cmake_version('02.04.03-rc07'),  '02.04.03');
is(to_version_string('02.04.03-rc07'), '02.04.03-rc07');
note('v02_04_03rc07');
more_tests(5);
compare_or_show(parse_version_string('v02_04_03rc07'), $rc_ref);
is(to_ups_version('v02_04_03rc07'),    'v02_04_03rc07');
is(to_dot_version('v02_04_03rc07'),    '02.04.03rc07');
is(to_cmake_version('v02_04_03rc07'),  '02.04.03');
is(to_version_string('v02_04_03rc07'), '02.04.03-rc07');
note('v02_04_03_rc07');
more_tests(5);
compare_or_show(parse_version_string('v02_04_03_rc07'), $rc_ref);
is(to_ups_version('v02_04_03_rc07'),    'v02_04_03rc07');
is(to_dot_version('v02_04_03_rc07'),    '02.04.03rc07');
is(to_cmake_version('v02_04_03_rc07'),  '02.04.03');
is(to_version_string('v02_04_03_rc07'), '02.04.03-rc07');
note('vart-develop-nightly-2021152663');
more_tests();
compare_or_show(
  parse_version_string('vart-develop-nightly-2021152663'),
  {   qw(extra_type 103 extra art-develop-nightly-2021152663
      extra_text art-develop-nightly extra_num 2021152663)
  });
note('2.3.0-snapshot-20210615');
more_tests();
compare_or_show(
  parse_version_string('2.3.0-snapshot-20210615'),
  { qw(extra_type 3 extra snapshot-20210615
      major 2 minor 3 patch 0
      extra_text snapshot extra_num 20210615), bits => [2, 3, 0] });
note('2.3-snapshot-20210615000000.20003');
more_tests();
compare_or_show(
  parse_version_string('2.3-snapshot-20210615000000.20003'),
  { qw(extra_type 3 extra snapshot-20210615000000.20003
      major 2 minor 3
      extra_text snapshot extra_num 20210615000000.20003), bits => [2, 3] });
note('Version comparisons');
my $ans_cache = {};


sub perl_version_cmp {
  my $ans;

  if (exists $ans_cache->{$a} and exists $ans_cache->{$a}->{$b}) {
    $ans = $ans_cache->{$a}->{$b};
  } elsif (exists $ans_cache->{$b} and exists $ans_cache->{$b}->{$a}) {
    $ans = -1 * $ans_cache->{$b}->{$a};
    $ans_cache->{$a}->{$b} = $ans;
  } else {
    $ans = version_cmp($a, $b);
    $ans_cache->{$a}->{$b} = $ans;
  }
  return $ans;
} ## end sub perl_version_cmp
my @v_ref_list = qw(
  1
  1.2
  1.2.0.0p1
  v1_2_0_1pre6
  2.3.0-snapshot-20210615
  2.3-snapshot-20210615000000.2
  2.3-snapshot-20210615000000.200025
  2.3-snapshot-20210615000000.20003
  nightly-276
  snapshot-29100
);
my $nshuffles = 10_000;
my $nfigs     = length $nshuffles;
my $idx       = 0;
more_tests($nshuffles);
my $sort_func = \&perl_version_cmp;

while ($idx < $nshuffles) {
  my @to_sort = shuffle(@v_ref_list);
  my @sorted  = sort $sort_func @to_sort;
  compare_or_show(\@sorted, \@v_ref_list,
    sprintf("perl_version_cmp-%0-${nfigs}d", ++$idx))
    or last;
} ## end while ($idx < $nshuffles)
done_testing($ntests);
